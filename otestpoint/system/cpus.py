#
# Copyright (c) 2018,2019 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of Adjacent Link LLC nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# See toplevel COPYING for more information.
#

'''
System CPUs Probe
'''

import psutil
import time

from otestpoint.interface import Probe
from otestpoint.interface.measurementtable_pb2 import MeasurementTable
import otestpoint.toolkit.logger as Logger
from .cpus_pb2 import Measurement_system_cpus


class CPUs(Probe):
    def initialize(self,configurationFile=None):
        '''
        Initialize the probe.

        Returns:
        The probe name list.
        '''
        self._logger.log(Logger.DEBUG_LEVEL,
                         '/system/cpus initialize'
                         ' configuration: %s' % configurationFile)

        self._measurement = Measurement_system_cpus()

        self._measurement_cpus_labels = ('CPU',
                                         'User',
                                         'Nice',
                                         'System',
                                         'Idle',
                                         'IOWait',
                                         'IRQ',
                                         'SoftIRQ',
                                         'Steal',
                                         'Guest',
                                         'GuestNice')

        self._measurement.cpus.labels.extend(self._measurement_cpus_labels)

        return ('System.CPUs',)


    def start(self):
        self._logger.log(Logger.DEBUG_LEVEL,'/system/cpus start')


    def stop(self):
        self._logger.log(Logger.DEBUG_LEVEL,'/system/cpus stop')


    def destroy(self):
        self._logger.log(Logger.DEBUG_LEVEL,'/system/cpus destroy')


    def probe(self):
        self._logger.log(Logger.DEBUG_LEVEL,'/system/cpus probe')

        self.parse_cpu_utilization()

        return (('System.CPUs',
                 self._measurement.SerializeToString(),
                 self._measurement.description.name,
                 self._measurement.description.module,
                 self._measurement.description.version),)


    def parse_cpu_utilization(self):
        del self._measurement.cpus.rows[:]

        for cpu_index,cpu_times in enumerate(psutil.cpu_times(percpu=True)):
                row = self._measurement.cpus.rows.add()

                # CPU
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_UINTEGER
                value.uValue = cpu_index

                # User
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.user

                # Nice
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.nice

                # System
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.system

                # Idle
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.idle

                # IOWait
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.iowait

                # IRQ
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.irq

                # SoftIRQ
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.softirq

                # Steal
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.steal

                # Guest
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.guest

                # GuestNice
                value = row.values.add()
                value.type = MeasurementTable.Measurement.TYPE_DOUBLE
                value.dValue = cpu_times.guest_nice


def default_method_format(self, measurement):
    def fromMeasurement(measurement):
        if measurement.type == MeasurementTable.Measurement.TYPE_UINTEGER:
            return measurement.uValue,str(measurement.uValue)
        elif measurement.type == MeasurementTable.Measurement.TYPE_DOUBLE:
            return measurement.dValue,'%0.2f' % measurement.dValue
        else:
            return measurement.sValue,measurement.sValue


    def format_table(table):
        buf = ''

        widths = [];

        for label in table.labels:
            widths.append(len(label))

        for row in table.rows:
            for i,value in enumerate(row.values):
                widths[i] = max(widths[i],len(fromMeasurement(value)[1]))

        for i,label in enumerate(table.labels):
            buf += '|' + label.ljust(widths[i])
        buf += "|\n"

        for row in table.rows:
            for i,value in enumerate(row.values):
                val = fromMeasurement(value)[1]
                buf += '|' + val.rjust(widths[i])
            buf += "|\n"

        return buf

    buf = '[] cpus\n'
    buf += format_table(measurement.cpus)
    buf += '--\n'

    return buf
