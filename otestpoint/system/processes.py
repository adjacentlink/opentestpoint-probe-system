#
# Copyright (c) 2018 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of Adjacent Link LLC nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# See toplevel COPYING for more information.
#

'''
System Processes Probe
'''

import psutil
import time

from otestpoint.interface import Probe
from otestpoint.interface.measurementtable_pb2 import MeasurementTable
import otestpoint.toolkit.logger as Logger
from processes_pb2 import Measurement_system_processes


class Processes(Probe):
    def initialize(self,configurationFile=None):
        '''
        Initialize the probe.
        
        Returns:
        The probe name list.
        '''
        self._logger.log(Logger.DEBUG_LEVEL,
                         '/system/processes initialize'
                         ' configuration: %s' % configurationFile)
 
        self._measurement = Measurement_system_processes()

        self._measurement_processes_labels = ('PID',
                                              'Command',
                                              'Affinity',
                                              'User',
                                              'System',
                                              'Runtime')

        self._measurement.processes.labels.extend(self._measurement_processes_labels)

        
        return ('System.Processes',)


    def start(self):
        self._logger.log(Logger.DEBUG_LEVEL,'/system/processes start')


    def stop(self):
        self._logger.log(Logger.DEBUG_LEVEL,'/system/processes stop')


    def destroy(self):
        self._logger.log(Logger.DEBUG_LEVEL,'/system/processes destroy')


    def probe(self):
        self._logger.log(Logger.DEBUG_LEVEL,'/system/processes probe')

        self.parse_process_utilization()

        return (('System.Processes',
                 self._measurement.SerializeToString(),
                 self._measurement.description.name,
                 self._measurement.description.module,
                 self._measurement.description.version),)


    def abbreviate_cpu_string(self, cpus):
        cpusr = cpus[1:] + [cpus[-1]]
        
        increments = map(lambda x: x[0] - x[1], zip(cpusr, cpus))

        node_toks = []

        left = None

        for node,increment in zip(cpus, increments):
            if left is None:
                left = node

            if increment != 1:
                if node == left:
                    node_toks.append(str(node))
                else:
                    node_toks.append('%d-%d' % (left,node))
                if increment > 1:
                    left = None
                
        return ','.join(node_toks)


    def parse_process_utilization(self):
        del self._measurement.processes.rows[:]

        now_time_secs = time.time()

        for pid in psutil.pids():
            row = self._measurement.processes.rows.add()

            process = psutil.Process(pid)

            # PID
            value = row.values.add()
            value.type = MeasurementTable.Measurement.TYPE_UINTEGER
            value.uValue = process.pid

            # Command
            value = row.values.add()
            value.type = MeasurementTable.Measurement.TYPE_STRING
            value.sValue = process.name()

            # Affinity
            value = row.values.add()
            value.type = MeasurementTable.Measurement.TYPE_STRING
            value.sValue = self.abbreviate_cpu_string(process.cpu_affinity())

            # User
            value = row.values.add()
            value.type = MeasurementTable.Measurement.TYPE_DOUBLE
            value.dValue = process.cpu_times().user

            # System
            value = row.values.add()
            value.type = MeasurementTable.Measurement.TYPE_DOUBLE
            value.dValue = process.cpu_times().system

            # Runtime
            value = row.values.add()
            value.type = MeasurementTable.Measurement.TYPE_DOUBLE
            value.dValue = now_time_secs - process.create_time()


def default_method_format(self, measurement):
    def fromMeasurement(measurement):
        if measurement.type == MeasurementTable.Measurement.TYPE_UINTEGER:
            return measurement.uValue,str(measurement.uValue)
        elif measurement.type == MeasurementTable.Measurement.TYPE_DOUBLE:
            return measurement.dValue,'%0.2f' % measurement.dValue
        else:
            return measurement.sValue,measurement.sValue


    def format_table(table):
        buf = ''
        
        widths = [];

        for label in table.labels:
            widths.append(len(label))
            
        for row in table.rows:
            for i,value in enumerate(row.values):
                widths[i] = max(widths[i],len(fromMeasurement(value)[1]))

        for i,label in enumerate(table.labels):
            buf += '|' + label.ljust(widths[i])
        buf += "|\n"

        for row in table.rows:
            for i,value in enumerate(row.values):
                val = fromMeasurement(value)[1]
                buf += '|' + val.rjust(widths[i])
            buf += "|\n"

        return buf

    buf = '[] processes\n'
    buf += format_table(measurement.processes)
    buf += '--\n'

    return buf

